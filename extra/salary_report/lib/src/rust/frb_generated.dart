// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/auth_api.dart';
import 'api/salary_api.dart';
import 'api/simple.dart';
import 'auth/auth_ai.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'salary_caculate/salary.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -400437944;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_salary_report',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  void crateApiSimpleBeep();

  AiInfo? crateApiAuthApiDecrypt({required String secretStr});

  Future<(String, SalarySummary?)> crateApiSalaryApiGetCaculateResult({
    required String filePath,
  });

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void crateApiSimpleBeep() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleBeepConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleBeepConstMeta =>
      const TaskConstMeta(debugName: "beep", argNames: []);

  @override
  AiInfo? crateApiAuthApiDecrypt({required String secretStr}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(secretStr, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_ai_info,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiAuthApiDecryptConstMeta,
        argValues: [secretStr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAuthApiDecryptConstMeta =>
      const TaskConstMeta(debugName: "decrypt", argNames: ["secretStr"]);

  @override
  Future<(String, SalarySummary?)> crateApiSalaryApiGetCaculateResult({
    required String filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(filePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_opt_box_autoadd_salary_summary,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSalaryApiGetCaculateResultConstMeta,
        argValues: [filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSalaryApiGetCaculateResultConstMeta =>
      const TaskConstMeta(
        debugName: "get_caculate_result",
        argNames: ["filePath"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AiInfo dco_decode_ai_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AiInfo(
      baseUrl: dco_decode_String(arr[0]),
      apiKey: dco_decode_String(arr[1]),
      modelName: dco_decode_String(arr[2]),
    );
  }

  @protected
  AiInfo dco_decode_box_autoadd_ai_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ai_info(raw);
  }

  @protected
  SalarySummary dco_decode_box_autoadd_salary_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_salary_summary(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<SalaryRecord> dco_decode_list_salary_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_salary_record).toList();
  }

  @protected
  AiInfo? dco_decode_opt_box_autoadd_ai_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ai_info(raw);
  }

  @protected
  SalarySummary? dco_decode_opt_box_autoadd_salary_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_salary_summary(raw);
  }

  @protected
  (String, SalarySummary?)
  dco_decode_record_string_opt_box_autoadd_salary_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_opt_box_autoadd_salary_summary(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  SalaryRecord dco_decode_salary_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 51)
      throw Exception('unexpected arr length: expect 51 but see ${arr.length}');
    return SalaryRecord(
      name: dco_decode_String(arr[0]),
      department: dco_decode_String(arr[1]),
      position: dco_decode_String(arr[2]),
      attendance: dco_decode_String(arr[3]),
      preTaxSalary: dco_decode_String(arr[4]),
      socialSecurityTax: dco_decode_String(arr[5]),
      netSalary: dco_decode_String(arr[6]),
      serialNumber: dco_decode_String(arr[7]),
      hireDate: dco_decode_String(arr[8]),
      terminationDate: dco_decode_String(arr[9]),
      gender: dco_decode_String(arr[10]),
      idNumber: dco_decode_String(arr[11]),
      regularizationDate: dco_decode_String(arr[12]),
      contractType: dco_decode_String(arr[13]),
      financialAggregation: dco_decode_String(arr[14]),
      secondaryDepartment: dco_decode_String(arr[15]),
      jobLevel: dco_decode_String(arr[16]),
      payrollDays: dco_decode_String(arr[17]),
      sickLeave: dco_decode_String(arr[18]),
      personalLeave: dco_decode_String(arr[19]),
      absence: dco_decode_String(arr[20]),
      truancy: dco_decode_String(arr[21]),
      performanceScore: dco_decode_String(arr[22]),
      basicSalary: dco_decode_String(arr[23]),
      positionSalary: dco_decode_String(arr[24]),
      performanceSalary: dco_decode_String(arr[25]),
      allowanceSalary: dco_decode_String(arr[26]),
      comprehensiveSalary: dco_decode_String(arr[27]),
      currentMonthBasic: dco_decode_String(arr[28]),
      currentMonthPosition: dco_decode_String(arr[29]),
      currentMonthPerformance: dco_decode_String(arr[30]),
      currentMonthAllowance: dco_decode_String(arr[31]),
      currentMonthSickDeduction: dco_decode_String(arr[32]),
      currentMonthPersonalLeaveDeduction: dco_decode_String(arr[33]),
      currentMonthAbsenceDeduction: dco_decode_String(arr[34]),
      currentMonthTruancyDeduction: dco_decode_String(arr[35]),
      mealAllowance: dco_decode_String(arr[36]),
      computerAllowance: dco_decode_String(arr[37]),
      otherAdjustments: dco_decode_String(arr[38]),
      monthlyPayrollSalary: dco_decode_String(arr[39]),
      socialSecurityBase: dco_decode_String(arr[40]),
      providentFundBase: dco_decode_String(arr[41]),
      personalPension: dco_decode_String(arr[42]),
      personalMedical: dco_decode_String(arr[43]),
      personalUnemployment: dco_decode_String(arr[44]),
      personalProvidentFund: dco_decode_String(arr[45]),
      monthlyPersonalIncomeTax: dco_decode_String(arr[46]),
      severancePay: dco_decode_String(arr[47]),
      postTaxAdjustments: dco_decode_String(arr[48]),
      bank: dco_decode_String(arr[49]),
      bankAccount: dco_decode_String(arr[50]),
    );
  }

  @protected
  SalarySummary dco_decode_salary_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SalarySummary(
      totalRecords: dco_decode_usize(arr[0]),
      records: dco_decode_list_salary_record(arr[1]),
      summaryData: dco_decode_Map_String_String_None(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AiInfo sse_decode_ai_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baseUrl = sse_decode_String(deserializer);
    var var_apiKey = sse_decode_String(deserializer);
    var var_modelName = sse_decode_String(deserializer);
    return AiInfo(
      baseUrl: var_baseUrl,
      apiKey: var_apiKey,
      modelName: var_modelName,
    );
  }

  @protected
  AiInfo sse_decode_box_autoadd_ai_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ai_info(deserializer));
  }

  @protected
  SalarySummary sse_decode_box_autoadd_salary_summary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_salary_summary(deserializer));
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<SalaryRecord> sse_decode_list_salary_record(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SalaryRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_salary_record(deserializer));
    }
    return ans_;
  }

  @protected
  AiInfo? sse_decode_opt_box_autoadd_ai_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ai_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SalarySummary? sse_decode_opt_box_autoadd_salary_summary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_salary_summary(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, SalarySummary?)
  sse_decode_record_string_opt_box_autoadd_salary_summary(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_opt_box_autoadd_salary_summary(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SalaryRecord sse_decode_salary_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_department = sse_decode_String(deserializer);
    var var_position = sse_decode_String(deserializer);
    var var_attendance = sse_decode_String(deserializer);
    var var_preTaxSalary = sse_decode_String(deserializer);
    var var_socialSecurityTax = sse_decode_String(deserializer);
    var var_netSalary = sse_decode_String(deserializer);
    var var_serialNumber = sse_decode_String(deserializer);
    var var_hireDate = sse_decode_String(deserializer);
    var var_terminationDate = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_idNumber = sse_decode_String(deserializer);
    var var_regularizationDate = sse_decode_String(deserializer);
    var var_contractType = sse_decode_String(deserializer);
    var var_financialAggregation = sse_decode_String(deserializer);
    var var_secondaryDepartment = sse_decode_String(deserializer);
    var var_jobLevel = sse_decode_String(deserializer);
    var var_payrollDays = sse_decode_String(deserializer);
    var var_sickLeave = sse_decode_String(deserializer);
    var var_personalLeave = sse_decode_String(deserializer);
    var var_absence = sse_decode_String(deserializer);
    var var_truancy = sse_decode_String(deserializer);
    var var_performanceScore = sse_decode_String(deserializer);
    var var_basicSalary = sse_decode_String(deserializer);
    var var_positionSalary = sse_decode_String(deserializer);
    var var_performanceSalary = sse_decode_String(deserializer);
    var var_allowanceSalary = sse_decode_String(deserializer);
    var var_comprehensiveSalary = sse_decode_String(deserializer);
    var var_currentMonthBasic = sse_decode_String(deserializer);
    var var_currentMonthPosition = sse_decode_String(deserializer);
    var var_currentMonthPerformance = sse_decode_String(deserializer);
    var var_currentMonthAllowance = sse_decode_String(deserializer);
    var var_currentMonthSickDeduction = sse_decode_String(deserializer);
    var var_currentMonthPersonalLeaveDeduction = sse_decode_String(
      deserializer,
    );
    var var_currentMonthAbsenceDeduction = sse_decode_String(deserializer);
    var var_currentMonthTruancyDeduction = sse_decode_String(deserializer);
    var var_mealAllowance = sse_decode_String(deserializer);
    var var_computerAllowance = sse_decode_String(deserializer);
    var var_otherAdjustments = sse_decode_String(deserializer);
    var var_monthlyPayrollSalary = sse_decode_String(deserializer);
    var var_socialSecurityBase = sse_decode_String(deserializer);
    var var_providentFundBase = sse_decode_String(deserializer);
    var var_personalPension = sse_decode_String(deserializer);
    var var_personalMedical = sse_decode_String(deserializer);
    var var_personalUnemployment = sse_decode_String(deserializer);
    var var_personalProvidentFund = sse_decode_String(deserializer);
    var var_monthlyPersonalIncomeTax = sse_decode_String(deserializer);
    var var_severancePay = sse_decode_String(deserializer);
    var var_postTaxAdjustments = sse_decode_String(deserializer);
    var var_bank = sse_decode_String(deserializer);
    var var_bankAccount = sse_decode_String(deserializer);
    return SalaryRecord(
      name: var_name,
      department: var_department,
      position: var_position,
      attendance: var_attendance,
      preTaxSalary: var_preTaxSalary,
      socialSecurityTax: var_socialSecurityTax,
      netSalary: var_netSalary,
      serialNumber: var_serialNumber,
      hireDate: var_hireDate,
      terminationDate: var_terminationDate,
      gender: var_gender,
      idNumber: var_idNumber,
      regularizationDate: var_regularizationDate,
      contractType: var_contractType,
      financialAggregation: var_financialAggregation,
      secondaryDepartment: var_secondaryDepartment,
      jobLevel: var_jobLevel,
      payrollDays: var_payrollDays,
      sickLeave: var_sickLeave,
      personalLeave: var_personalLeave,
      absence: var_absence,
      truancy: var_truancy,
      performanceScore: var_performanceScore,
      basicSalary: var_basicSalary,
      positionSalary: var_positionSalary,
      performanceSalary: var_performanceSalary,
      allowanceSalary: var_allowanceSalary,
      comprehensiveSalary: var_comprehensiveSalary,
      currentMonthBasic: var_currentMonthBasic,
      currentMonthPosition: var_currentMonthPosition,
      currentMonthPerformance: var_currentMonthPerformance,
      currentMonthAllowance: var_currentMonthAllowance,
      currentMonthSickDeduction: var_currentMonthSickDeduction,
      currentMonthPersonalLeaveDeduction:
          var_currentMonthPersonalLeaveDeduction,
      currentMonthAbsenceDeduction: var_currentMonthAbsenceDeduction,
      currentMonthTruancyDeduction: var_currentMonthTruancyDeduction,
      mealAllowance: var_mealAllowance,
      computerAllowance: var_computerAllowance,
      otherAdjustments: var_otherAdjustments,
      monthlyPayrollSalary: var_monthlyPayrollSalary,
      socialSecurityBase: var_socialSecurityBase,
      providentFundBase: var_providentFundBase,
      personalPension: var_personalPension,
      personalMedical: var_personalMedical,
      personalUnemployment: var_personalUnemployment,
      personalProvidentFund: var_personalProvidentFund,
      monthlyPersonalIncomeTax: var_monthlyPersonalIncomeTax,
      severancePay: var_severancePay,
      postTaxAdjustments: var_postTaxAdjustments,
      bank: var_bank,
      bankAccount: var_bankAccount,
    );
  }

  @protected
  SalarySummary sse_decode_salary_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_totalRecords = sse_decode_usize(deserializer);
    var var_records = sse_decode_list_salary_record(deserializer);
    var var_summaryData = sse_decode_Map_String_String_None(deserializer);
    return SalarySummary(
      totalRecords: var_totalRecords,
      records: var_records,
      summaryData: var_summaryData,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_ai_info(AiInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.baseUrl, serializer);
    sse_encode_String(self.apiKey, serializer);
    sse_encode_String(self.modelName, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ai_info(AiInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ai_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_salary_summary(
    SalarySummary self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_salary_summary(self, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_salary_record(
    List<SalaryRecord> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_salary_record(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ai_info(
    AiInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ai_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_salary_summary(
    SalarySummary? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_salary_summary(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_opt_box_autoadd_salary_summary(
    (String, SalarySummary?) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_opt_box_autoadd_salary_summary(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_salary_record(SalaryRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.department, serializer);
    sse_encode_String(self.position, serializer);
    sse_encode_String(self.attendance, serializer);
    sse_encode_String(self.preTaxSalary, serializer);
    sse_encode_String(self.socialSecurityTax, serializer);
    sse_encode_String(self.netSalary, serializer);
    sse_encode_String(self.serialNumber, serializer);
    sse_encode_String(self.hireDate, serializer);
    sse_encode_String(self.terminationDate, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.idNumber, serializer);
    sse_encode_String(self.regularizationDate, serializer);
    sse_encode_String(self.contractType, serializer);
    sse_encode_String(self.financialAggregation, serializer);
    sse_encode_String(self.secondaryDepartment, serializer);
    sse_encode_String(self.jobLevel, serializer);
    sse_encode_String(self.payrollDays, serializer);
    sse_encode_String(self.sickLeave, serializer);
    sse_encode_String(self.personalLeave, serializer);
    sse_encode_String(self.absence, serializer);
    sse_encode_String(self.truancy, serializer);
    sse_encode_String(self.performanceScore, serializer);
    sse_encode_String(self.basicSalary, serializer);
    sse_encode_String(self.positionSalary, serializer);
    sse_encode_String(self.performanceSalary, serializer);
    sse_encode_String(self.allowanceSalary, serializer);
    sse_encode_String(self.comprehensiveSalary, serializer);
    sse_encode_String(self.currentMonthBasic, serializer);
    sse_encode_String(self.currentMonthPosition, serializer);
    sse_encode_String(self.currentMonthPerformance, serializer);
    sse_encode_String(self.currentMonthAllowance, serializer);
    sse_encode_String(self.currentMonthSickDeduction, serializer);
    sse_encode_String(self.currentMonthPersonalLeaveDeduction, serializer);
    sse_encode_String(self.currentMonthAbsenceDeduction, serializer);
    sse_encode_String(self.currentMonthTruancyDeduction, serializer);
    sse_encode_String(self.mealAllowance, serializer);
    sse_encode_String(self.computerAllowance, serializer);
    sse_encode_String(self.otherAdjustments, serializer);
    sse_encode_String(self.monthlyPayrollSalary, serializer);
    sse_encode_String(self.socialSecurityBase, serializer);
    sse_encode_String(self.providentFundBase, serializer);
    sse_encode_String(self.personalPension, serializer);
    sse_encode_String(self.personalMedical, serializer);
    sse_encode_String(self.personalUnemployment, serializer);
    sse_encode_String(self.personalProvidentFund, serializer);
    sse_encode_String(self.monthlyPersonalIncomeTax, serializer);
    sse_encode_String(self.severancePay, serializer);
    sse_encode_String(self.postTaxAdjustments, serializer);
    sse_encode_String(self.bank, serializer);
    sse_encode_String(self.bankAccount, serializer);
  }

  @protected
  void sse_encode_salary_summary(SalarySummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.totalRecords, serializer);
    sse_encode_list_salary_record(self.records, serializer);
    sse_encode_Map_String_String_None(self.summaryData, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
