// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// 工资记录
class SalaryRecord {
  final String name;
  final String department;
  final String position;
  final String attendance;
  final String preTaxSalary;
  final String socialSecurityTax;
  final String netSalary;
  final String serialNumber;
  final String hireDate;
  final String terminationDate;
  final String gender;
  final String idNumber;
  final String regularizationDate;
  final String contractType;
  final String financialAggregation;
  final String secondaryDepartment;
  final String jobLevel;
  final String payrollDays;
  final String sickLeave;
  final String personalLeave;
  final String absence;
  final String truancy;
  final String performanceScore;
  final String basicSalary;
  final String positionSalary;
  final String performanceSalary;
  final String allowanceSalary;
  final String comprehensiveSalary;
  final String currentMonthBasic;
  final String currentMonthPosition;
  final String currentMonthPerformance;
  final String currentMonthAllowance;
  final String currentMonthSickDeduction;
  final String currentMonthPersonalLeaveDeduction;
  final String currentMonthAbsenceDeduction;
  final String currentMonthTruancyDeduction;
  final String mealAllowance;
  final String computerAllowance;
  final String otherAdjustments;
  final String monthlyPayrollSalary;
  final String socialSecurityBase;
  final String providentFundBase;
  final String personalPension;
  final String personalMedical;
  final String personalUnemployment;
  final String personalProvidentFund;
  final String monthlyPersonalIncomeTax;
  final String severancePay;
  final String postTaxAdjustments;
  final String bank;
  final String bankAccount;

  const SalaryRecord({
    required this.name,
    required this.department,
    required this.position,
    required this.attendance,
    required this.preTaxSalary,
    required this.socialSecurityTax,
    required this.netSalary,
    required this.serialNumber,
    required this.hireDate,
    required this.terminationDate,
    required this.gender,
    required this.idNumber,
    required this.regularizationDate,
    required this.contractType,
    required this.financialAggregation,
    required this.secondaryDepartment,
    required this.jobLevel,
    required this.payrollDays,
    required this.sickLeave,
    required this.personalLeave,
    required this.absence,
    required this.truancy,
    required this.performanceScore,
    required this.basicSalary,
    required this.positionSalary,
    required this.performanceSalary,
    required this.allowanceSalary,
    required this.comprehensiveSalary,
    required this.currentMonthBasic,
    required this.currentMonthPosition,
    required this.currentMonthPerformance,
    required this.currentMonthAllowance,
    required this.currentMonthSickDeduction,
    required this.currentMonthPersonalLeaveDeduction,
    required this.currentMonthAbsenceDeduction,
    required this.currentMonthTruancyDeduction,
    required this.mealAllowance,
    required this.computerAllowance,
    required this.otherAdjustments,
    required this.monthlyPayrollSalary,
    required this.socialSecurityBase,
    required this.providentFundBase,
    required this.personalPension,
    required this.personalMedical,
    required this.personalUnemployment,
    required this.personalProvidentFund,
    required this.monthlyPersonalIncomeTax,
    required this.severancePay,
    required this.postTaxAdjustments,
    required this.bank,
    required this.bankAccount,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      department.hashCode ^
      position.hashCode ^
      attendance.hashCode ^
      preTaxSalary.hashCode ^
      socialSecurityTax.hashCode ^
      netSalary.hashCode ^
      serialNumber.hashCode ^
      hireDate.hashCode ^
      terminationDate.hashCode ^
      gender.hashCode ^
      idNumber.hashCode ^
      regularizationDate.hashCode ^
      contractType.hashCode ^
      financialAggregation.hashCode ^
      secondaryDepartment.hashCode ^
      jobLevel.hashCode ^
      payrollDays.hashCode ^
      sickLeave.hashCode ^
      personalLeave.hashCode ^
      absence.hashCode ^
      truancy.hashCode ^
      performanceScore.hashCode ^
      basicSalary.hashCode ^
      positionSalary.hashCode ^
      performanceSalary.hashCode ^
      allowanceSalary.hashCode ^
      comprehensiveSalary.hashCode ^
      currentMonthBasic.hashCode ^
      currentMonthPosition.hashCode ^
      currentMonthPerformance.hashCode ^
      currentMonthAllowance.hashCode ^
      currentMonthSickDeduction.hashCode ^
      currentMonthPersonalLeaveDeduction.hashCode ^
      currentMonthAbsenceDeduction.hashCode ^
      currentMonthTruancyDeduction.hashCode ^
      mealAllowance.hashCode ^
      computerAllowance.hashCode ^
      otherAdjustments.hashCode ^
      monthlyPayrollSalary.hashCode ^
      socialSecurityBase.hashCode ^
      providentFundBase.hashCode ^
      personalPension.hashCode ^
      personalMedical.hashCode ^
      personalUnemployment.hashCode ^
      personalProvidentFund.hashCode ^
      monthlyPersonalIncomeTax.hashCode ^
      severancePay.hashCode ^
      postTaxAdjustments.hashCode ^
      bank.hashCode ^
      bankAccount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SalaryRecord &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          department == other.department &&
          position == other.position &&
          attendance == other.attendance &&
          preTaxSalary == other.preTaxSalary &&
          socialSecurityTax == other.socialSecurityTax &&
          netSalary == other.netSalary &&
          serialNumber == other.serialNumber &&
          hireDate == other.hireDate &&
          terminationDate == other.terminationDate &&
          gender == other.gender &&
          idNumber == other.idNumber &&
          regularizationDate == other.regularizationDate &&
          contractType == other.contractType &&
          financialAggregation == other.financialAggregation &&
          secondaryDepartment == other.secondaryDepartment &&
          jobLevel == other.jobLevel &&
          payrollDays == other.payrollDays &&
          sickLeave == other.sickLeave &&
          personalLeave == other.personalLeave &&
          absence == other.absence &&
          truancy == other.truancy &&
          performanceScore == other.performanceScore &&
          basicSalary == other.basicSalary &&
          positionSalary == other.positionSalary &&
          performanceSalary == other.performanceSalary &&
          allowanceSalary == other.allowanceSalary &&
          comprehensiveSalary == other.comprehensiveSalary &&
          currentMonthBasic == other.currentMonthBasic &&
          currentMonthPosition == other.currentMonthPosition &&
          currentMonthPerformance == other.currentMonthPerformance &&
          currentMonthAllowance == other.currentMonthAllowance &&
          currentMonthSickDeduction == other.currentMonthSickDeduction &&
          currentMonthPersonalLeaveDeduction ==
              other.currentMonthPersonalLeaveDeduction &&
          currentMonthAbsenceDeduction == other.currentMonthAbsenceDeduction &&
          currentMonthTruancyDeduction == other.currentMonthTruancyDeduction &&
          mealAllowance == other.mealAllowance &&
          computerAllowance == other.computerAllowance &&
          otherAdjustments == other.otherAdjustments &&
          monthlyPayrollSalary == other.monthlyPayrollSalary &&
          socialSecurityBase == other.socialSecurityBase &&
          providentFundBase == other.providentFundBase &&
          personalPension == other.personalPension &&
          personalMedical == other.personalMedical &&
          personalUnemployment == other.personalUnemployment &&
          personalProvidentFund == other.personalProvidentFund &&
          monthlyPersonalIncomeTax == other.monthlyPersonalIncomeTax &&
          severancePay == other.severancePay &&
          postTaxAdjustments == other.postTaxAdjustments &&
          bank == other.bank &&
          bankAccount == other.bankAccount;
}

/// 工资汇总信息
class SalarySummary {
  final BigInt totalRecords;
  final List<SalaryRecord> records;

  /// 汇总行数据，键为字段名或列索引，值为单元格内容
  final Map<String, String> summaryData;

  const SalarySummary({
    required this.totalRecords,
    required this.records,
    required this.summaryData,
  });

  @override
  int get hashCode =>
      totalRecords.hashCode ^ records.hashCode ^ summaryData.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SalarySummary &&
          runtimeType == other.runtimeType &&
          totalRecords == other.totalRecords &&
          records == other.records &&
          summaryData == other.summaryData;
}
